####
# ARPANET - Dec 1970 [1]
#
# [1] http://mercury.lcs.mit.edu/~jnc/tech/arpalog.html
####

use_id? = true; use_type? = false

# function to select id/map based on use_id? setting
val = fn map -> if use_id?, do: map.id, else: map end
# function to select type/map based on use_type? setting
lab = fn map -> if use_type?, do: map.type, else: map end

####

##
## GRAPH

g = Graph.new(type: :directed)


##
## SEGMENT 1 - Outer Circuit (Clockwise from UCLA to RAND)


# Site: UCLA

ucla = %{ id: :ucla, label: "Node", type: "IMP", site: "UCLA" }

# ucla_h1 = %{ id: :ucla_h1, label: "Host", type: "360/91" }
# ucla_h2 = %{ id: :ucla_h2, label: "Host", type: "XDS SIGMA7" }

g = g
|> Graph.add_vertex(val.(ucla), lab.(ucla))
# |> Graph.add_vertex(val.(ucla_h1), lab.(ucla_h1))
# |> Graph.add_vertex(val.(ucla_h2), lab.(ucla_h2))
# |> Graph.add_edge(val.(ucla_h1), val.(ucla), label: "H_LINK")
# |> Graph.add_edge(val.(ucla_h2), val.(ucla), label: "H_LINK")


# Site: SRI

sri = %{ id: :sri, label: "Node", type: "IMP", site: "SRI" }

# sri_h1 = %{ id: :sri_h1, label: "Host", type: "PDP-10" }
# sri_h2 = %{ id: :sri_h2, label: "Host", type: "XDS-940" }

g = g
|> Graph.add_vertex(val.(sri), lab.(sri))
# |> Graph.add_vertex(val.(sri_h1), lab.(sri_h1))
# |> Graph.add_vertex(val.(sri_h2), lab.(sri_h2))
# |> Graph.add_edge(val.(sri_h1), val.(sri), label: "H_LINK")
# |> Graph.add_edge(val.(sri_h2), val.(sri), label: "H_LINK")


# Site: UTAH

utah = %{ id: :utah, label: "Node", type: "IMP", site: "UTAH" }

# utah_h1 = %{ id: :utah_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(utah), lab.(utah))
# |> Graph.add_vertex(val.(utah_h1), lab.(utah_h1))
# |> Graph.add_edge(val.(utah_h1), val.(utah), label: "H_LINK")


# Site: MIT

mit = %{ id: :mit, label: "Node", type: "IMP", site: "MIT" }

# mit_h1 = %{ id: :mit_h1, label: "Host", type: "PDP-10" }
# mit_h2 = %{ id: :mit_h2, label: "Host", type: "PDP-10" }
# mit_h3 = %{ id: :mit_h3, label: "Host", type: "GE-645" }

g = g
|> Graph.add_vertex(val.(mit), lab.(mit))
# |> Graph.add_vertex(val.(mit_h1), lab.(mit_h1))
# |> Graph.add_vertex(val.(mit_h2), lab.(mit_h2))
# |> Graph.add_vertex(val.(mit_h3), lab.(mit_h3))
# |> Graph.add_edge(val.(mit_h1), val.(mit), label: "H_LINK")
# |> Graph.add_edge(val.(mit_h2), val.(mit), label: "H_LINK")
# |> Graph.add_edge(val.(mit_h3), val.(mit), label: "H_LINK")


# Site: LINCOLN

lincoln = %{ id: :lincoln, label: "Node", type: "IMP", site: "LINCOLN" }

# lincoln_h1 = %{ id: :lincoln_h1, label: "Host", type: "360/67" }
# lincoln_h2 = %{ id: :lincoln_h2, label: "Host", type: "TX2" }
# lincoln_h3 = %{ id: :lincoln_h3, label: "Host", type: "TSP" }

g = g
|> Graph.add_vertex(val.(lincoln), lab.(lincoln))
# |> Graph.add_vertex(val.(lincoln_h1), lab.(lincoln_h1))
# |> Graph.add_vertex(val.(lincoln_h2), lab.(lincoln_h2))
# |> Graph.add_vertex(val.(lincoln_h3), lab.(lincoln_h3))
# |> Graph.add_edge(val.(lincoln_h1), val.(lincoln), label: "H_LINK")
# |> Graph.add_edge(val.(lincoln_h2), val.(lincoln), label: "H_LINK")
# |> Graph.add_edge(val.(lincoln_h3), val.(lincoln), label: "H_LINK")


# Site: CASE

case = %{ id: :case, label: "Node", type: "IMP", site: "CASE" }

# case_h1 = %{ id: :case_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(case), lab.(case))
# |> Graph.add_vertex(val.(case_h1), lab.(case_h1))
# |> Graph.add_edge(val.(case_h1), val.(case), label: "H_LINK")


# Site: CARNEGIE

carnegie = %{ id: :carnegie, label: "Node", type: "IMP", site: "CARNEGIE" }

# carnegie_h1 = %{ id: :carnegie_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(carnegie), lab.(carnegie))
# |> Graph.add_vertex(val.(carnegie_h1), lab.(carnegie_h1))
# |> Graph.add_edge(val.(carnegie_h1), val.(carnegie), label: "H_LINK")


# Site: HARVARD

harvard = %{ id: :harvard, label: "Node", type: "IMP", site: "HARVARD" }

# harvard_h1 = %{ id: :harvard_h1, label: "Host", type: "PDP-1" }
# harvard_h2 = %{ id: :harvard_h2, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(harvard), lab.(harvard))
# |> Graph.add_vertex(val.(harvard_h1), lab.(harvard_h1))
# |> Graph.add_vertex(val.(harvard_h2), lab.(harvard_h2))
# |> Graph.add_edge(val.(harvard_h1), val.(harvard), label: "H_LINK")
# |> Graph.add_edge(val.(harvard_h2), val.(harvard), label: "H_LINK")


# Site: BBN

bbn = %{ id: :bbn, label: "Node", type: "IMP", site: "BBN" }

# bbn_h1 = %{ id: :bbn_h1, label: "Host", type: "DDP-516" }
# bbn_h2 = %{ id: :bbn_h2, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(bbn), lab.(bbn))
# |> Graph.add_vertex(val.(bbn_h1), lab.(bbn_h1))
# |> Graph.add_vertex(val.(bbn_h2), lab.(bbn_h2))
# |> Graph.add_edge(val.(bbn_h1), val.(bbn), label: "H_LINK")
# |> Graph.add_edge(val.(bbn_h2), val.(bbn), label: "H_LINK")


# Site: RAND

rand = %{ id: :rand, label: "Node", type: "IMP", site: "RAND" }

# rand_h1 = %{ id: :rand_h1, label: "Host", type: "IBM 1800" }
# rand_h2 = %{ id: :rand_h2, label: "Host", type: "360/65" }

g = g
|> Graph.add_vertex(val.(rand), lab.(rand))
# |> Graph.add_vertex(val.(rand_h1), lab.(rand_h1))
# |> Graph.add_vertex(val.(rand_h2), lab.(rand_h2))
# |> Graph.add_edge(val.(rand_h1), val.(rand), label: "H_LINK")
# |> Graph.add_edge(val.(rand_h2), val.(rand), label: "H_LINK")


##
## SEGMENT 2 - Inner Path (Up from UCLA to SRI)


# Site: UCSB

ucsb = %{ id: :ucsb, label: "Node", type: "IMP", site: "UCSB" }

# ucsb_h1 = %{ id: :ucsb_h1, label: "Host", type: "360/75" }

g = g
|> Graph.add_vertex(val.(ucsb), lab.(ucsb))
# |> Graph.add_vertex(val.(ucsb_h1), lab.(ucsb_h1))
# |> Graph.add_edge(val.(ucsb_h1), val.(ucsb), label: "H_LINK")

##
## SEGMENT 3 - Inner Path (Up from RAND to SRI)


# Site: STANFORD

stanford = %{ id: :stanford, label: "Node", type: "IMP", site: "STANFORD" }

# stanford_h1 = %{ id: :stanford_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(stanford), lab.(stanford))
# |> Graph.add_vertex(val.(stanford_h1), lab.(stanford_h1))
# |> Graph.add_edge(val.(stanford_h1), val.(stanford), label: "H_LINK")

##
## SEGMENT 4 - Inner Path (Up from RAND to UTAH)


# Site: SDC

sdc = %{ id: :sdc, label: "Node", type: "IMP", site: "SDC" }

# sdc_h1 = %{ id: :sdc_h1, label: "Host", type: "DDP-516" }
# sdc_h2 = %{ id: :sdc_h2, label: "Host", type: "360/67" }

g = g
|> Graph.add_vertex(val.(sdc), lab.(sdc))
# |> Graph.add_vertex(val.(sdc_h1), lab.(sdc_h1))
# |> Graph.add_vertex(val.(sdc_h2), lab.(sdc_h2))
# |> Graph.add_edge(val.(sdc_h1), val.(sdc), label: "H_LINK")
# |> Graph.add_edge(val.(sdc_h2), val.(sdc), label: "H_LINK")

##
## SEGMENT 5 - Inner Path (Up from BBN to MIT)


##
## NETWORK (10+2+2+2+1=17)

g = g
##
## SEGMENT 1 - Outer Circuit (Clockwise from UCLA to RAND)
|> Graph.add_edge(val.(ucla), val.(sri), label: "N_LINK")
|> Graph.add_edge(val.(sri), val.(utah), label: "N_LINK")
|> Graph.add_edge(val.(utah), val.(mit), label: "N_LINK")
|> Graph.add_edge(val.(mit), val.(lincoln), label: "N_LINK")
|> Graph.add_edge(val.(lincoln), val.(case), label: "N_LINK")
|> Graph.add_edge(val.(case), val.(carnegie), label: "N_LINK")
|> Graph.add_edge(val.(carnegie), val.(harvard), label: "N_LINK")
|> Graph.add_edge(val.(harvard), val.(bbn), label: "N_LINK")
|> Graph.add_edge(val.(bbn), val.(rand), label: "N_LINK")
|> Graph.add_edge(val.(rand), val.(ucla), label: "N_LINK")
##
## SEGMENT 2 - Inner Path (Up from UCLA to SRI)
|> Graph.add_edge(val.(ucla), val.(ucsb), label: "N_LINK")
|> Graph.add_edge(val.(ucsb), val.(sri), label: "N_LINK")
##
## SEGMENT 3 - Inner Path (Up from RAND to SRI)
|> Graph.add_edge(val.(rand), val.(stanford), label: "N_LINK")
|> Graph.add_edge(val.(stanford), val.(sri), label: "N_LINK")
##
## SEGMENT 4 - Inner Path (Up from RAND to UTAH)
|> Graph.add_edge(val.(rand), val.(sdc), label: "N_LINK")
|> Graph.add_edge(val.(sdc), val.(utah), label: "N_LINK")
##
## SEGMENT 5 - Inner Path (Up from BBN to MIT)
|> Graph.add_edge(val.(bbn), val.(mit), label: "N_LINK")


####

# add reversed edges
g = g |> Graph.edges |> Enum.reduce(g, fn %{v1: v1, v2: v2, label: label} = _e, g -> Graph.add_edge(g, v2, v1, label: label) end)
