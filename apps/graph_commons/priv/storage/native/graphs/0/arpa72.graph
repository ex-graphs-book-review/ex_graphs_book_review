####
# ARPANET - Dec 1972 [1,2]
#
# [1] RFC-432, N. Neigus (BBN), https://tools.ietf.org/pdf/rfc432.pdf
# [2] http://mercury.lcs.mit.edu/~jnc/tech/arpalog.html
####

use_id? = true; use_label? = true

# function to select id/map based on use_id? setting
val = fn map -> if use_id?, do: map.id, else: map end
# function to select type/map based on use_type? setting
lab = fn map -> if use_label?, do: map.label, else: map end

####

##
## GRAPH

g = Graph.new(type: :undirected)


##
## SEGMENT 1 - Outer Circuit (Clockwise from UCLA to SDC)


# Site: UCLA

ucla = %{ id: :ucla, label: "Node", type: "IMP", site: "UCLA" }

ucla_h1 = %{ id: :ucla_h1, label: "Host", type: "360/91" }
ucla_h2 = %{ id: :ucla_h2, label: "Host", type: "SIGMA-7" }

g = g
|> Graph.add_vertex(val.(ucla), lab.(ucla))
|> Graph.add_vertex(val.(ucla_h1), lab.(ucla_h1))
|> Graph.add_vertex(val.(ucla_h2), lab.(ucla_h2))
|> Graph.add_edge(val.(ucla_h1), val.(ucla), type: "H_LINK")
|> Graph.add_edge(val.(ucla_h2), val.(ucla), type: "H_LINK")


# Site: UCSB

ucsb = %{ id: :ucsb, label: "Node", type: "IMP", site: "UCSB" }

ucsb_h1 = %{ id: :ucsb_h1, label: "Host", type: "360/75" }

g = g
|> Graph.add_vertex(val.(ucsb), lab.(ucsb))
|> Graph.add_vertex(val.(ucsb_h1), lab.(ucsb_h1))
|> Graph.add_edge(val.(ucsb_h1), val.(ucsb), type: "H_LINK")


# Site: FNWC

fnwc = %{ id: :fnwc, label: "Node", type: "TIP", site: "FNWC" }

g = g
|> Graph.add_vertex(val.(fnwc), lab.(fnwc))


# Site: XEROX

xerox = %{ id: :xerox, label: "Node", type: "316 IMP", site: "XEROX" }

g = g
|> Graph.add_vertex(val.(xerox), lab.(xerox))


# Site: SRI

sri = %{ id: :sri, label: "Node", type: "IMP", site: "SRI" }

sri_h1 = %{ id: :sri_h1, label: "Host", type: "PDP-10" }
sri_h2 = %{ id: :sri_h2, label: "Host", type: "PDP-15", user: "PDP-10" }

g = g
|> Graph.add_vertex(val.(sri), lab.(sri))
|> Graph.add_vertex(val.(sri_h1), lab.(sri_h1))
|> Graph.add_vertex(val.(sri_h2), lab.(sri_h2))
|> Graph.add_edge(val.(sri_h1), val.(sri), type: "H_LINK")
|> Graph.add_edge(val.(sri_h2), val.(sri), type: "H_LINK")


# Site: UTAH

utah = %{ id: :utah, label: "Node", type: "IMP", site: "UTAH" }

utah_h1 = %{ id: :utah_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(utah), lab.(utah))
|> Graph.add_vertex(val.(utah_h1), lab.(utah_h1))
|> Graph.add_edge(val.(utah_h1), val.(utah), type: "H_LINK")


# Site: ILLINOIS

illinois = %{ id: :illinois, label: "Node", type: "IMP", site: "ILLINOIS" }

illinois_h1 = %{ id: :illinois_h1, label: "Host", type: "PDP-11" }

g = g
|> Graph.add_vertex(val.(illinois), lab.(illinois))
|> Graph.add_vertex(val.(illinois_h1), lab.(illinois_h1))
|> Graph.add_edge(val.(illinois_h1), val.(illinois), type: "H_LINK")


# Site: MIT

mit = %{ id: :mit, label: "Node", type: "IMP", site: "MIT" }

mit_h1 = %{ id: :mit_h1, label: "Host", type: "PDP-10" }
mit_h2 = %{ id: :mit_h2, label: "Host", type: "PDP-10" }
mit_h3 = %{ id: :mit_h3, label: "Host", type: "PDP-10" }
mit_h4 = %{ id: :mit_h4, label: "Host", type: "H-645" }

g = g
|> Graph.add_vertex(val.(mit), lab.(mit))
|> Graph.add_vertex(val.(mit_h1), lab.(mit_h1))
|> Graph.add_vertex(val.(mit_h2), lab.(mit_h2))
|> Graph.add_vertex(val.(mit_h3), lab.(mit_h3))
|> Graph.add_vertex(val.(mit_h4), lab.(mit_h4))
|> Graph.add_edge(val.(mit_h1), val.(mit), type: "H_LINK")
|> Graph.add_edge(val.(mit_h2), val.(mit), type: "H_LINK")
|> Graph.add_edge(val.(mit_h3), val.(mit), type: "H_LINK")
|> Graph.add_edge(val.(mit_h4), val.(mit), type: "H_LINK")


# Site: LINCOLN

lincoln = %{ id: :lincoln, label: "Node", type: "IMP", site: "LINCOLN" }

lincoln_h1 = %{ id: :lincoln_h1, label: "Host", type: "360/67" }
lincoln_h2 = %{ id: :lincoln_h2, label: "Host", type: "TX-2" }
lincoln_h3 = %{ id: :lincoln_h3, label: "Host", type: "TSP" }

g = g
|> Graph.add_vertex(val.(lincoln), lab.(lincoln))
|> Graph.add_vertex(val.(lincoln_h1), lab.(lincoln_h1))
|> Graph.add_vertex(val.(lincoln_h2), lab.(lincoln_h2))
|> Graph.add_vertex(val.(lincoln_h3), lab.(lincoln_h3))
|> Graph.add_edge(val.(lincoln_h1), val.(lincoln), type: "H_LINK")
|> Graph.add_edge(val.(lincoln_h2), val.(lincoln), type: "H_LINK")
|> Graph.add_edge(val.(lincoln_h3), val.(lincoln), type: "H_LINK")


# Site: RADC

radc = %{ id: :radc, label: "Node", type: "TIP", site: "RADC" }

g = g
|> Graph.add_vertex(val.(radc), lab.(radc))


# Site: CASE

case = %{ id: :case, label: "Node", type: "IMP", site: "CASE" }

case_h1 = %{ id: :case_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(case), lab.(case))
|> Graph.add_vertex(val.(case_h1), lab.(case_h1))
|> Graph.add_edge(val.(case_h1), val.(case), type: "H_LINK")


# Site: GWC

gwc = %{ id: :gwc, label: "Node", type: "TIP", site: "GWC" }

g = g
|> Graph.add_vertex(val.(gwc), lab.(gwc))


# Site: DOCB

docb = %{ id: :docb, label: "Node", type: "TIP", site: "DOCB" }

g = g
|> Graph.add_vertex(val.(docb), lab.(docb))


# Site: USC

usc = %{ id: :usc, label: "Node", type: "TIP", site: "USC" }

usc_h1 = %{ id: :usc_h1, label: "Host", type: "360/44" }

g = g
|> Graph.add_vertex(val.(usc), lab.(usc))
|> Graph.add_vertex(val.(usc_h1), lab.(usc_h1))
|> Graph.add_edge(val.(usc_h1), val.(usc), type: "H_LINK")


# Site: SDC

sdc = %{ id: :sdc, label: "Node", type: "IMP", site: "SDC" }

sdc_h1 = %{ id: :sdc_h1, label: "Host", type: "DDP-516", user: "370/145" }

g = g
|> Graph.add_vertex(val.(sdc), lab.(sdc))
|> Graph.add_vertex(val.(sdc_h1), lab.(sdc_h1))
|> Graph.add_edge(val.(sdc_h1), val.(sdc), type: "H_LINK")


##
## SEGMENT 2 - Inner Path (Up from UCLA to SRI)


# Site: UCSD

ucsd = %{ id: :ucsd, label: "Node", type: "316 IMP", site: "UCSD" }

ucsd_h1 = %{ id: :ucsd_h1, label: "Host", type: "MICRO 810", user: "B6700" }

g = g
|> Graph.add_vertex(val.(ucsd), lab.(ucsd))
|> Graph.add_vertex(val.(ucsd_h1), lab.(ucsd_h1))
|> Graph.add_edge(val.(ucsd_h1), val.(ucsd), type: "H_LINK")


# Site: RAND

rand = %{ id: :rand, label: "Node", type: "316 IMP", site: "RAND" }

rand_h1 = %{ id: :rand_h1, label: "Host", type: "IBM 1800", user: "360/65" }

g = g
|> Graph.add_vertex(val.(rand), lab.(rand))
|> Graph.add_vertex(val.(rand_h1), lab.(rand_h1))
|> Graph.add_edge(val.(rand_h1), val.(rand), type: "H_LINK")


# Site: USC-ISI

usc_isi = %{ id: :usc_isi, label: "Node", type: "IMP", site: "USC-ISI" }

usc_isi_h1 = %{ id: :usc_isi_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(usc_isi), lab.(usc_isi))
|> Graph.add_vertex(val.(usc_isi_h1), lab.(usc_isi_h1))
|> Graph.add_edge(val.(usc_isi_h1), val.(usc_isi), type: "H_LINK")


# Site: STANFORD

stanford = %{ id: :stanford, label: "Node", type: "IMP", site: "STANFORD" }

stanford_h1 = %{ id: :stanford_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(stanford), lab.(stanford))
|> Graph.add_vertex(val.(stanford_h1), lab.(stanford_h1))
|> Graph.add_edge(val.(stanford_h1), val.(stanford), type: "H_LINK")


# Site: AMES

ames = %{ id: :ames, label: "Node", type: "IMP", site: "AMES" }

ames_h1 = %{ id: :ames_h1, label: "Host", type: "PDP-10" }
ames_h2 = %{ id: :ames_h2, label: "Host", type: "PDP-11" }

g = g
|> Graph.add_vertex(val.(ames), lab.(ames))
|> Graph.add_vertex(val.(ames_h1), lab.(ames_h1))
|> Graph.add_vertex(val.(ames_h2), lab.(ames_h2))
|> Graph.add_edge(val.(ames_h1), val.(ames), type: "H_LINK")
|> Graph.add_edge(val.(ames_h2), val.(ames), type: "H_LINK")


# Site: AMES1

ames1 = %{ id: :ames1, label: "Node", type: "TIP", site: "AMES1" }

ames1_h1 = %{ id: :ames1_h1, label: "Host", type: "360-67" }

g = g
|> Graph.add_vertex(val.(ames1), lab.(ames1))
|> Graph.add_vertex(val.(ames1_h1), lab.(ames1_h1))
|> Graph.add_edge(val.(ames1_h1), val.(ames1), type: "H_LINK")


##
## SEGMENT 3 - Inner Path (Up from CASE to MIT)


# Site: CARNEGIE

carnegie = %{ id: :carnegie, label: "Node", type: "IMP", site: "CARNEGIE" }

carnegie_h1 = %{ id: :carnegie_h1, label: "Host", type: "PDP-10" }
carnegie_h2 = %{ id: :carnegie_h2, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(carnegie), lab.(carnegie))
|> Graph.add_vertex(val.(carnegie_h1), lab.(carnegie_h1))
|> Graph.add_vertex(val.(carnegie_h2), lab.(carnegie_h2))
|> Graph.add_edge(val.(carnegie_h1), val.(carnegie), type: "H_LINK")
|> Graph.add_edge(val.(carnegie_h2), val.(carnegie), type: "H_LINK")


# Site: BELVOIR

belvoir = %{ id: :belvoir, label: "Node", type: "316 IMP", site: "BELVOIR" }

g = g
|> Graph.add_vertex(val.(belvoir), lab.(belvoir))


# Site: SAAC

saac = %{ id: :saac, label: "Node", type: "TIP", site: "SAAC" }

g = g
|> Graph.add_vertex(val.(saac), lab.(saac))


# Site: MITRE

mitre = %{ id: :mitre, label: "Node", type: "TIP", site: "MITRE" }

g = g
|> Graph.add_vertex(val.(mitre), lab.(mitre))


# Site: ARPA

arpa = %{ id: :arpa, label: "Node", type: "TIP", site: "ARPA" }

arpa_h1 = %{ id: :arpa_h1, label: "Host", type: "PDP-15" }

g = g
|> Graph.add_vertex(val.(arpa), lab.(arpa))
|> Graph.add_vertex(val.(arpa_h1), lab.(arpa_h1))
|> Graph.add_edge(val.(arpa_h1), val.(arpa), type: "H_LINK")


# Site: ETAC

etac = %{ id: :etac, label: "Node", type: "TIP", site: "ETAC" }

g = g
|> Graph.add_vertex(val.(etac), lab.(etac))


# Site: NBS

nbs = %{ id: :nbs, label: "Node", type: "TIP", site: "NBS" }

nbs_h1 = %{ id: :nbs_h1, label: "Host", type: "PDP-11" }

g = g
|> Graph.add_vertex(val.(nbs), lab.(nbs))
|> Graph.add_vertex(val.(nbs_h1), lab.(nbs_h1))
|> Graph.add_edge(val.(nbs_h1), val.(nbs), type: "H_LINK")


# Site: ABERDEEN

aberdeen = %{ id: :aberdeen, label: "Node", type: "316 IMP", site: "ABERDEEN" }

g = g
|> Graph.add_vertex(val.(aberdeen), lab.(aberdeen))


# Site: HARVARD

harvard = %{ id: :harvard, label: "Node", type: "IMP", site: "HARVARD" }

harvard_h1 = %{ id: :harvard_h1, label: "Host", type: "PDP-1" }
harvard_h2 = %{ id: :harvard_h2, label: "Host", type: "PDP-10" }
harvard_h3 = %{ id: :harvard_h3, label: "Host", type: "PDP-11" }

g = g
|> Graph.add_vertex(val.(harvard), lab.(harvard))
|> Graph.add_vertex(val.(harvard_h1), lab.(harvard_h1))
|> Graph.add_vertex(val.(harvard_h2), lab.(harvard_h2))
|> Graph.add_vertex(val.(harvard_h3), lab.(harvard_h3))
|> Graph.add_edge(val.(harvard_h1), val.(harvard), type: "H_LINK")
|> Graph.add_edge(val.(harvard_h2), val.(harvard), type: "H_LINK")
|> Graph.add_edge(val.(harvard_h3), val.(harvard), type: "H_LINK")


# Site: BBN

bbn = %{ id: :bbn, label: "Node", type: "IMP", site: "BBN" }

bbn_h1 = %{ id: :bbn_h1, label: "Host", type: "PDP-1" }
bbn_h2 = %{ id: :bbn_h2, label: "Host", type: "PDP-10" }
bbn_h3 = %{ id: :bbn_h3, label: "Host", type: "PDP-10" }
bbn_h4 = %{ id: :bbn_h4, label: "Host", type: "H-316" }

g = g
|> Graph.add_vertex(val.(bbn), lab.(bbn))
|> Graph.add_vertex(val.(bbn_h1), lab.(bbn_h1))
|> Graph.add_vertex(val.(bbn_h2), lab.(bbn_h2))
|> Graph.add_vertex(val.(bbn_h3), lab.(bbn_h3))
|> Graph.add_vertex(val.(bbn_h4), lab.(bbn_h4))
|> Graph.add_edge(val.(bbn_h1), val.(bbn), type: "H_LINK")
|> Graph.add_edge(val.(bbn_h2), val.(bbn), type: "H_LINK")
|> Graph.add_edge(val.(bbn_h3), val.(bbn), type: "H_LINK")
|> Graph.add_edge(val.(bbn_h4), val.(bbn), type: "H_LINK")


# Site: BBN1

bbn1 = %{ id: :bbn1, label: "Node", type: "TIP", site: "BBN1" }

g = g
|> Graph.add_vertex(val.(bbn1), lab.(bbn1))


##
## SEGMENT 4 - Inner Path (Right from HAWAII to AMES)


# Site: HAWAII

hawaii = %{ id: :hawaii, label: "Node", type: "TIP", site: "HAWAII" }


g = g
|> Graph.add_vertex(val.(hawaii), lab.(hawaii))


##
## SEGMENT 5 - Inner Path (Right from USC-ISI to ETAC)


# Site: TINKER

tinker = %{ id: :tinker, label: "Node", type: "316 IMP", site: "TINKER" }

tinker_h1 = %{ id: :tinker_h1, label: "Host", type: "UNIVAC 418 III" }

g = g
|> Graph.add_vertex(val.(tinker), lab.(tinker))
|> Graph.add_vertex(val.(tinker_h1), lab.(tinker_h1))
|> Graph.add_edge(val.(tinker_h1), val.(tinker), type: "H_LINK")


##
## SEGMENT 6 - Inner Path (Right from ABERDEEN to BELVOIR)


##
## SEGMENT 7 - Inner Path (Right from CCA to BBN)


# Site: CCA

cca = %{ id: :cca, label: "Node", type: "TIP", site: "CCA" }

cca_h1 = %{ id: :cca_h1, label: "Host", type: "PDP-10" }

g = g
|> Graph.add_vertex(val.(cca), lab.(cca))
|> Graph.add_vertex(val.(cca_h1), lab.(cca_h1))
|> Graph.add_edge(val.(cca_h1), val.(cca), type: "H_LINK")


##
## NETWORK (15+7+12+1+2+1+1=39)

g = g
##
## SEGMENT 1 - Outer Circuit (Clockwise from UCLA to SDC)
|> Graph.add_edge(val.(ucla), val.(ucsb), type: "N_LINK")
|> Graph.add_edge(val.(ucsb), val.(fnwc), type: "N_LINK")
|> Graph.add_edge(val.(fnwc), val.(xerox), type: "N_LINK")
|> Graph.add_edge(val.(xerox), val.(sri), type: "N_LINK")
|> Graph.add_edge(val.(sri), val.(utah), type: "N_LINK")
|> Graph.add_edge(val.(utah), val.(illinois), type: "N_LINK")
|> Graph.add_edge(val.(illinois), val.(mit), type: "N_LINK")
|> Graph.add_edge(val.(mit), val.(lincoln), type: "N_LINK")
|> Graph.add_edge(val.(lincoln), val.(radc), type: "N_LINK")
|> Graph.add_edge(val.(radc), val.(case), type: "N_LINK")
|> Graph.add_edge(val.(case), val.(gwc), type: "N_LINK")
|> Graph.add_edge(val.(gwc), val.(docb), type: "N_LINK")
|> Graph.add_edge(val.(docb), val.(usc), type: "N_LINK")
|> Graph.add_edge(val.(usc), val.(sdc), type: "N_LINK")
|> Graph.add_edge(val.(sdc), val.(ucla), type: "N_LINK")
##
## SEGMENT 2 - Inner Path (Up from UCLA to SRI)
|> Graph.add_edge(val.(ucla), val.(ucsd), type: "N_LINK")
|> Graph.add_edge(val.(ucsd), val.(rand), type: "N_LINK")
|> Graph.add_edge(val.(rand), val.(usc_isi), type: "N_LINK")
|> Graph.add_edge(val.(usc_isi), val.(stanford), type: "N_LINK")
|> Graph.add_edge(val.(stanford), val.(ames), type: "N_LINK")
|> Graph.add_edge(val.(ames), val.(ames1), type: "N_LINK")
|> Graph.add_edge(val.(ames1), val.(sri), type: "N_LINK")
##
## SEGMENT 3 - Inner Path (Up from CASE to MIT)
|> Graph.add_edge(val.(case), val.(carnegie), type: "N_LINK")
|> Graph.add_edge(val.(carnegie), val.(belvoir), type: "N_LINK")
|> Graph.add_edge(val.(belvoir), val.(saac), type: "N_LINK")
|> Graph.add_edge(val.(saac), val.(mitre), type: "N_LINK")
|> Graph.add_edge(val.(mitre), val.(arpa), type: "N_LINK")
|> Graph.add_edge(val.(arpa), val.(etac), type: "N_LINK")
|> Graph.add_edge(val.(etac), val.(nbs), type: "N_LINK")
|> Graph.add_edge(val.(nbs), val.(aberdeen), type: "N_LINK")
|> Graph.add_edge(val.(aberdeen), val.(harvard), type: "N_LINK")
|> Graph.add_edge(val.(harvard), val.(bbn), type: "N_LINK")
|> Graph.add_edge(val.(bbn), val.(bbn1), type: "N_LINK")
|> Graph.add_edge(val.(bbn1), val.(mit), type: "N_LINK")
##
## SEGMENT 4 - Inner Path (Right from HAWAII to AMES)
|> Graph.add_edge(val.(hawaii), val.(ames), type: "S_LINK")
##
## SEGMENT 5 - Inner Path (Right from USC-ISI to ETAC)
|> Graph.add_edge(val.(usc_isi), val.(tinker), type: "N_LINK")
|> Graph.add_edge(val.(tinker), val.(etac), type: "N_LINK")
##
## SEGMENT 6 - Inner Path (Right from ABERDEEN to BELVOIR)
|> Graph.add_edge(val.(aberdeen), val.(belvoir), type: "N_LINK")
##
## SEGMENT 7 - Inner Path (Right from CCA to BBN)
|> Graph.add_edge(val.(cca), val.(bbn), type: "N_LINK")


####

# add reversed edges
# g = g |> Graph.edges |> Enum.reduce(g, fn %{v1: v1, v2: v2, label: label} = _e, g -> Graph.add_edge(g, v2, v1, label: label) end)
