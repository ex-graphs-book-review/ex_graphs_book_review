
use_id? = true; use_type? = true

# function to select id/map based on use_id? setting
val = fn map -> if use_id?, do: map.id, else: map end
# function to select type/map based on use_type? setting
lab = fn map -> if use_type?, do: map.type, else: map end

#
g = Graph.new(type: :undirected)

# Site: RML
# Site: USC-ISI
# Site: STANFORD *
# Site: AMES
# Site: AMES1
# Site: SRI *
# Site: LBL
# Site: UTAH *
# Site: ILLINOIS
# Site: MIT *
# Site: CCA
# Site: BBN *
# Site: BBN1
# Site: HARVARD *
# Site: ABERDEEN
# Site: NBS
# Site: ETAC
# Site: RAND *
# Site: UCSD
# Site: UCLA *
# Site: SDC *
# Site: USC
# Site: DOCB
# Site: GWC
# Site: CASE *
# Site: RADC
# Site: LINCOLN *
# Site: UCSB *
# Site: FNWC
# Site: XEROX
# Site: ARPA
# Site: MITRE
# Site: SDAC
# Site: BELVOIR
# Site: CARNEGIE *
# Site: HAWAII


# Site: STANFORD

stanford = %{ id: :stanford, type: "IMP", site: "STANFORD" }

stanford_h1 = %{ id: :stanford_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(stanford), lab.(stanford))
|> Graph.add_vertex(val.(stanford_h1), lab.(stanford_h1))
|> Graph.add_edge(val.(stanford_h1), val.(stanford))


# Site: SRI

sri = %{ id: :sri, type: "IMP", site: "SRI" }

sri_h1 = %{ id: :sri_h1, type: "Host", computer: "PDP-10" }
sri_h2 = %{ id: :sri_h2, type: "Host", computer: "XDS-940" }

g = g
|> Graph.add_vertex(val.(sri), lab.(sri))
|> Graph.add_vertex(val.(sri_h1), lab.(sri_h1))
|> Graph.add_vertex(val.(sri_h2), lab.(sri_h2))
|> Graph.add_edge(val.(sri_h1), val.(sri))
|> Graph.add_edge(val.(sri_h2), val.(sri))


# Site: UTAH

utah = %{ id: :utah, type: "IMP", site: "UTAH" }

utah_h1 = %{ id: :utah_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(utah), lab.(utah))
|> Graph.add_vertex(val.(utah_h1), lab.(utah_h1))
|> Graph.add_edge(val.(utah_h1), val.(utah))


# Site: MIT

mit = %{ id: :mit, type: "IMP", site: "MIT" }

mit_h1 = %{ id: :mit_h1, type: "Host", computer: "PDP-10" }
mit_h2 = %{ id: :mit_h2, type: "Host", computer: "PDP-10" }
mit_h3 = %{ id: :mit_h3, type: "Host", computer: "GE-645" }

g = g
|> Graph.add_vertex(val.(mit), lab.(mit))
|> Graph.add_vertex(val.(mit_h1), lab.(mit_h1))
|> Graph.add_vertex(val.(mit_h2), lab.(mit_h2))
|> Graph.add_vertex(val.(mit_h3), lab.(mit_h3))
|> Graph.add_edge(val.(mit_h1), val.(mit))
|> Graph.add_edge(val.(mit_h2), val.(mit))
|> Graph.add_edge(val.(mit_h3), val.(mit))


# Site: BBN

bbn = %{ id: :bbn, type: "IMP", site: "BBN" }

bbn_h1 = %{ id: :bbn_h1, type: "Host", computer: "DDP-516" }
bbn_h2 = %{ id: :bbn_h2, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(bbn), lab.(bbn))
|> Graph.add_vertex(val.(bbn_h1), lab.(bbn_h1))
|> Graph.add_vertex(val.(bbn_h2), lab.(bbn_h2))
|> Graph.add_edge(val.(bbn_h1), val.(bbn))
|> Graph.add_edge(val.(bbn_h2), val.(bbn))


# Site: HARVARD

harvard = %{ id: :harvard, type: "IMP", site: "HARVARD" }

harvard_h1 = %{ id: :harvard_h1, type: "Host", computer: "PDP-1" }
harvard_h2 = %{ id: :harvard_h2, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(harvard), lab.(harvard))
|> Graph.add_vertex(val.(harvard_h1), lab.(harvard_h1))
|> Graph.add_vertex(val.(harvard_h2), lab.(harvard_h2))
|> Graph.add_edge(val.(harvard_h1), val.(harvard))
|> Graph.add_edge(val.(harvard_h2), val.(harvard))


## Segment 2 - Main Diagonal - Up from RAND to LINCOLN

# Site: RAND

rand = %{ id: :rand, type: "IMP", site: "RAND" }

rand_h1 = %{ id: :rand_h1, type: "Host", computer: "IBM 1800" }
rand_h2 = %{ id: :rand_h2, type: "Host", computer: "360/65" }

g = g
|> Graph.add_vertex(val.(rand), lab.(rand))
|> Graph.add_vertex(val.(rand_h1), lab.(rand_h1))
|> Graph.add_vertex(val.(rand_h2), lab.(rand_h2))
|> Graph.add_edge(val.(rand_h1), val.(rand))
|> Graph.add_edge(val.(rand_h2), val.(rand))


# Site: UCLA

ucla = %{ id: :ucla, type: "IMP", site: "UCLA" }

ucla_h1 = %{ id: :ucla_h1, type: "Host", computer: "360/91" }
ucla_h2 = %{ id: :ucla_h2, type: "Host", computer: "XDS SIGMA7" }

g = g
|> Graph.add_vertex(val.(ucla), lab.(ucla))
|> Graph.add_vertex(val.(ucla_h1), lab.(ucla_h1))
|> Graph.add_vertex(val.(ucla_h2), lab.(ucla_h2))
|> Graph.add_edge(val.(ucla_h1), val.(ucla))
|> Graph.add_edge(val.(ucla_h2), val.(ucla))


# Site: SDC

sdc = %{ id: :sdc, type: "IMP", site: "SDC" }

sdc_h1 = %{ id: :sdc_h1, type: "Host", computer: "DDP-516" }
sdc_h2 = %{ id: :sdc_h2, type: "Host", computer: "360/67" }

g = g
|> Graph.add_vertex(val.(sdc), lab.(sdc))
|> Graph.add_vertex(val.(sdc_h1), lab.(sdc_h1))
|> Graph.add_vertex(val.(sdc_h2), lab.(sdc_h2))
|> Graph.add_edge(val.(sdc_h1), val.(sdc))
|> Graph.add_edge(val.(sdc_h2), val.(sdc))


# Site: CASE

case = %{ id: :case, type: "IMP", site: "CASE" }

case_h1 = %{ id: :case_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(case), lab.(case))
|> Graph.add_vertex(val.(case_h1), lab.(case_h1))
|> Graph.add_edge(val.(case_h1), val.(case))


# Site: LINCOLN

lincoln = %{ id: :lincoln, type: "IMP", site: "LINCOLN" }

lincoln_h1 = %{ id: :lincoln_h1, type: "Host", computer: "360/67" }
lincoln_h2 = %{ id: :lincoln_h2, type: "Host", computer: "TX2" }
lincoln_h3 = %{ id: :lincoln_h3, type: "Host", computer: "TSP" }

g = g
|> Graph.add_vertex(val.(lincoln), lab.(lincoln))
|> Graph.add_vertex(val.(lincoln_h1), lab.(lincoln_h1))
|> Graph.add_vertex(val.(lincoln_h2), lab.(lincoln_h2))
|> Graph.add_vertex(val.(lincoln_h3), lab.(lincoln_h3))
|> Graph.add_edge(val.(lincoln_h1), val.(lincoln))
|> Graph.add_edge(val.(lincoln_h2), val.(lincoln))
|> Graph.add_edge(val.(lincoln_h3), val.(lincoln))


## Segment 3 - Second Diagonal, LHS - Up from UCSB to XEROX

# Site: UCSB

ucsb = %{ id: :ucsb, type: "IMP", site: "UCSB" }

ucsb_h1 = %{ id: :ucsb_h1, type: "Host", computer: "360/75" }

g = g
|> Graph.add_vertex(val.(ucsb), lab.(ucsb))
|> Graph.add_vertex(val.(ucsb_h1), lab.(ucsb_h1))
|> Graph.add_edge(val.(ucsb_h1), val.(ucsb))


# Site: CARNEGIE

carnegie = %{ id: :carnegie, type: "IMP", site: "CARNEGIE" }

carnegie_h1 = %{ id: :carnegie_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(carnegie), lab.(carnegie))
|> Graph.add_vertex(val.(carnegie_h1), lab.(carnegie_h1))
|> Graph.add_edge(val.(carnegie_h1), val.(carnegie))


# Wiring

g = g
|> Graph.add_edge(val.(ucla), val.(ucsb))
|> Graph.add_edge(val.(ucsb), val.(sri))
|> Graph.add_edge(val.(ucla), val.(sri))
|> Graph.add_edge(val.(sri), val.(utah))
|> Graph.add_edge(val.(utah), val.(mit))
|> Graph.add_edge(val.(mit), val.(lincoln))
|> Graph.add_edge(val.(lincoln), val.(case))
|> Graph.add_edge(val.(case), val.(carnegie))
|> Graph.add_edge(val.(carnegie), val.(harvard))
|> Graph.add_edge(val.(harvard), val.(bbn))
|> Graph.add_edge(val.(bbn), val.(mit))
|> Graph.add_edge(val.(bbn), val.(rand))
|> Graph.add_edge(val.(rand), val.(sdc))
|> Graph.add_edge(val.(sdc), val.(utah))
|> Graph.add_edge(val.(rand), val.(stanford))
|> Graph.add_edge(val.(stanford), val.(sri))
|> Graph.add_edge(val.(rand), val.(ucla))

# add reversed edges
g = g |> Graph.edges |> Enum.reduce(g, fn %{v1: v1, v2: v2, label: label} = _e, g -> Graph.add_edge(g, v2, v1, label: label) end)
