defmodule PropertyGraph.Client do
  @moduledoc """
  Module providing a simple library for querying LPG models in a Neo4j instance via Cypher.
  """

  import PropertyGraph, only: [read_query: 0, read_query: 1]

  @cypher_delete """
  MATCH (n) OPTIONAL MATCH (n)-[r]-() DELETE n,r
  """

  @cypher_counts """
  MATCH (n) OPTIONAL MATCH p = (n)-[r]-()
  RETURN
  count(distinct n) as nodes,
  count(distinct r) as relationships,
  count(distinct p) as paths
  """

  @doc false
  def cypher_query(), do: read_query().data

  @doc false
  def cypher_query(query_file), do: read_query(query_file).data

  @doc """
  Queries Bolt connection with  Cypher query.
  """
  def rquery(cypher_query \\ cypher_query()) do
    {:ok, response} = Bolt.Sips.query(Bolt.Sips.conn(), cypher_query)
    _parse_response(response)
  end

  @doc """
  The same as `rquery/1` but raises a runtime error if it fails.
  """
  def rquery!(cypher_query \\ cypher_query()) do
    response = Bolt.Sips.query!(Bolt.Sips.conn(), cypher_query)
    _parse_response(response)
  end

  defp _parse_response(response) do
    %Bolt.Sips.Response{type: type} = response

    case type do
      "w" ->
        %Bolt.Sips.Response{stats: stats} = response
        stats

      "r" ->
        %Bolt.Sips.Response{results: results} = response
        results
    end
  end

  ## database
  @doc """
  Opens up a Bolt database connection with the app config.
  """
  def init() do
    # Application.get_env(:bolt_sips, Bolt)
    # |> Bolt.Sips.start_link()

    Bolt.Sips.info()
  end

  @doc """
  Deletes all nodes and relationships in database.
  """
  def clear(), do: Bolt.Sips.query!(Bolt.Sips.conn(), @cypher_delete)

  @doc """
  Dumps all nodes and relationships in database.
  """
  def dump(graph_file) do
    graph_path = Path.join(PropertyGraph.graphs_dir(), graph_file)

    query = """
    CALL apoc.export.cypher.all('#{graph_path}',{format:'plain'})
    """

    rquery(query)
  end

  @doc """
  Dumps all nodes and relationships in database.
  """
  def dump(query_file, graph_file) do
    graph_path = Path.join(PropertyGraph.graphs_dir(), graph_file)

    query = """
    CALL apoc.export.cypher.all('#{query_file}','#{graph_path}',{format:'plain'})
    """

    rquery(query)
  end

  @doc """
  Deletes all nodes and relationships in database.
  """
  def reset(), do: Bolt.Sips.query!(Bolt.Sips.conn(), @cypher_delete)

  @doc """
  Counts nodes, relationships and paths in database.
  """
  def test(), do: rquery(@cypher_counts)
end
