
use_id? = true; use_type? = false

# function to select id/map based on use_id? setting
val = fn map -> if use_id?, do: map.id, else: map end
# function to select type/map based on use_type? setting
lab = fn map -> if use_type?, do: map.type, else: map end

#
g = Graph.new(type: :undirected)

# check on 316 IMP

# ! # Site: RML x TINKER (UNIVAC 418 III)
# @ # Site: USC-ISI =
# @ # Site: STANFORD =
# ! # Site: AMES = (-PDP-11)
# ! # Site: AMES1 = (360.67)
# @ # Site: SRI =
# - # Site: LBL x
# @ # Site: UTAH =
# @ # Site: ILLINOIS =
# @ # Site: MIT =
# @ # Site: CCA =
# @ # Site: BBN =
# @ # Site: BBN1 =
# @ # Site: HARVARD =
# @ # Site: ABERDEEN =
# @ # Site: NBS =
# @ # Site: ETAC =
# @ # Site: RAND =
# @ # Site: UCSD =
# ! # Site: UCLA = (SIGMA-7)
# @ # Site: SDC =
# @ # Site: USC =
# @ # Site: DOCB =
# @ # Site: GWC =
# @ # Site: CASE =
# @ # Site: RADC =
# @ # Site: LINCOLN =
# ! # Site: UCSB = (-PDP11)
# @ # Site: FNWC =
# !! # Site: XEROX = (none)
# @ # Site: ARPA =
# @ # Site: MITRE =
# ! # Site: SDAC = (SAAC)
# @ # Site: BELVOIR =
# @ # Site: CARNEGIE =
# @ # Site: HAWAII =


## Segment 1 - Outer Circuit - Clockwise from RML to ETAC

# Site: RML

rml = %{ id: :rml, type: "TIP", site: "RML" }

rml_h1 = %{ id: :rml_h1, type: "Host", computer: "360/67" }

g = g
|> Graph.add_vertex(val.(rml), lab.(rml))
|> Graph.add_vertex(val.(rml_h1), lab.(rml_h1))
|> Graph.add_edge(val.(rml_h1), val.(rml))


# Site: USC-ISI

usc_isi = %{ id: :usc_isi, type: "IMP", site: "USC-ISI" }

usc_isi_h1 = %{ id: :usc_isi_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(usc_isi), lab.(usc_isi))
|> Graph.add_vertex(val.(usc_isi_h1), lab.(usc_isi_h1))
|> Graph.add_edge(val.(usc_isi_h1), val.(usc_isi))
|> Graph.add_edge(val.(usc_isi), val.(rml))


# Site: STANFORD

stanford = %{ id: :stanford, type: "IMP", site: "STANFORD" }

stanford_h1 = %{ id: :stanford_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(stanford), lab.(stanford))
|> Graph.add_vertex(val.(stanford_h1), lab.(stanford_h1))
|> Graph.add_edge(val.(stanford_h1), val.(stanford))
|> Graph.add_edge(val.(stanford), val.(usc_isi))


# Site: AMES

ames = %{ id: :ames, type: "IMP", site: "AMES" }

ames_h1 = %{ id: :ames_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(ames), lab.(ames))
|> Graph.add_vertex(val.(ames_h1), lab.(ames_h1))
|> Graph.add_edge(val.(ames_h1), val.(ames))
|> Graph.add_edge(val.(ames), val.(stanford))


# Site: AMES1

ames1 = %{ id: :ames1, type: "TIP", site: "AMES1" }

ames1_h1 = %{ id: :ames1_h1, type: "Host", computer: "360/67" }

g = g
|> Graph.add_vertex(val.(ames1), lab.(ames1))
|> Graph.add_vertex(val.(ames1_h1), lab.(ames1_h1))
|> Graph.add_edge(val.(ames1_h1), val.(ames1))
|> Graph.add_edge(val.(ames1), val.(ames))


# Site: SRI

sri = %{ id: :sri, type: "IMP", site: "SRI" }

sri_h1 = %{ id: :sri_h1, type: "Host", computer: "PDP-10" }
sri_h2 = %{ id: :sri_h2, type: "Host", computer: "PDP-15" }
# sri_h3 = %{ id: :sri_h3, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(sri), lab.(sri))
|> Graph.add_vertex(val.(sri_h1), lab.(sri_h1))
|> Graph.add_vertex(val.(sri_h2), lab.(sri_h2))
# |> Graph.add_vertex(val.(sri_h3), lab.(sri_h3))
|> Graph.add_edge(val.(sri_h1), val.(sri))
|> Graph.add_edge(val.(sri_h2), val.(sri))
#Â |> Graph.add_edge(val.(sri_h3), val.(sri))
|> Graph.add_edge(val.(sri), val.(ames1))


# Site: LBL

lbl = %{ id: :lbl, type: "IMP", site: "LBL" }

g = g
|> Graph.add_vertex(val.(lbl), lab.(lbl))
|> Graph.add_edge(val.(lbl), val.(sri))


# Site: UTAH

utah = %{ id: :utah, type: "IMP", site: "UTAH" }

utah_h1 = %{ id: :utah_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(utah), lab.(utah))
|> Graph.add_vertex(val.(utah_h1), lab.(utah_h1))
|> Graph.add_edge(val.(utah_h1), val.(utah))
|> Graph.add_edge(val.(utah), val.(lbl))


# Site: ILLINOIS

illinois = %{ id: :illinois, type: "IMP", site: "ILLINOIS" }

illinois_h1 = %{ id: :illinois_h1, type: "Host", computer: "PDP-11" }

g = g
|> Graph.add_vertex(val.(illinois), lab.(illinois))
|> Graph.add_vertex(val.(illinois_h1), lab.(illinois_h1))
|> Graph.add_edge(val.(illinois_h1), val.(illinois))
|> Graph.add_edge(val.(illinois), val.(utah))


# Site: MIT

mit = %{ id: :mit, type: "IMP", site: "MIT" }

mit_h1 = %{ id: :mit_h1, type: "Host", computer: "PDP-10" }
mit_h2 = %{ id: :mit_h2, type: "Host", computer: "PDP-10" }
mit_h3 = %{ id: :mit_h3, type: "Host", computer: "PDP-10" }
mit_h4 = %{ id: :mit_h4, type: "Host", computer: "H-645" }

g = g
|> Graph.add_vertex(val.(mit), lab.(mit))
|> Graph.add_vertex(val.(mit_h1), lab.(mit_h1))
|> Graph.add_vertex(val.(mit_h2), lab.(mit_h2))
|> Graph.add_vertex(val.(mit_h3), lab.(mit_h3))
|> Graph.add_vertex(val.(mit_h4), lab.(mit_h4))
|> Graph.add_edge(val.(mit_h1), val.(mit))
|> Graph.add_edge(val.(mit_h2), val.(mit))
|> Graph.add_edge(val.(mit_h3), val.(mit))
|> Graph.add_edge(val.(mit_h4), val.(mit))
|> Graph.add_edge(val.(mit), val.(illinois))


# Site: CCA

cca = %{ id: :cca, type: "TIP", site: "CCA" }

cca_h1 = %{ id: :cca_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(cca), lab.(cca))
|> Graph.add_vertex(val.(cca_h1), lab.(cca_h1))
|> Graph.add_edge(val.(cca_h1), val.(cca))
|> Graph.add_edge(val.(cca), val.(mit))


# Site: BBN

bbn = %{ id: :bbn, type: "IMP", site: "BBN" }

bbn_h1 = %{ id: :bbn_h1, type: "Host", computer: "PDP-1" }
bbn_h2 = %{ id: :bbn_h2, type: "Host", computer: "PDP-10" }
bbn_h3 = %{ id: :bbn_h3, type: "Host", computer: "PDP-10" }
bbn_h4 = %{ id: :bbn_h4, type: "Host", computer: "H-316" }

g = g
|> Graph.add_vertex(val.(bbn), lab.(bbn))
|> Graph.add_vertex(val.(bbn_h1), lab.(bbn_h1))
|> Graph.add_vertex(val.(bbn_h2), lab.(bbn_h2))
|> Graph.add_vertex(val.(bbn_h3), lab.(bbn_h3))
|> Graph.add_vertex(val.(bbn_h4), lab.(bbn_h4))
|> Graph.add_edge(val.(bbn_h1), val.(bbn))
|> Graph.add_edge(val.(bbn_h2), val.(bbn))
|> Graph.add_edge(val.(bbn_h3), val.(bbn))
|> Graph.add_edge(val.(bbn_h4), val.(bbn))
|> Graph.add_edge(val.(bbn), val.(cca))


# Site: BBN1

bbn1 = %{ id: :bbn1, type: "TIP", site: "BBN1" }

g = g
|> Graph.add_vertex(val.(bbn1), lab.(bbn1))
|> Graph.add_edge(val.(bbn1), val.(bbn))


# Site: HARVARD

harvard = %{ id: :harvard, type: "IMP", site: "HARVARD" }

harvard_h1 = %{ id: :harvard_h1, type: "Host", computer: "PDP-1" }
harvard_h2 = %{ id: :harvard_h2, type: "Host", computer: "PDP-10" }
harvard_h3 = %{ id: :harvard_h3, type: "Host", computer: "PDP-11" }

g = g
|> Graph.add_vertex(val.(harvard), lab.(harvard))
|> Graph.add_vertex(val.(harvard_h1), lab.(harvard_h1))
|> Graph.add_vertex(val.(harvard_h2), lab.(harvard_h2))
|> Graph.add_vertex(val.(harvard_h3), lab.(harvard_h3))
|> Graph.add_edge(val.(harvard_h1), val.(harvard))
|> Graph.add_edge(val.(harvard_h2), val.(harvard))
|> Graph.add_edge(val.(harvard_h3), val.(harvard))
|> Graph.add_edge(val.(harvard), val.(bbn))


# Site: ABERDEEN

aberdeen = %{ id: :aberdeen, type: "IMP", site: "ABERDEEN" }

g = g
|> Graph.add_vertex(val.(aberdeen), lab.(aberdeen))
|> Graph.add_edge(val.(aberdeen), val.(harvard))


# Site: NBS

nbs = %{ id: :nbs, type: "TIP", site: "NBS" }

nbs_h1 = %{ id: :nbs_h1, type: "Host", computer: "PDP-11" }

g = g
|> Graph.add_vertex(val.(nbs), lab.(nbs))
|> Graph.add_vertex(val.(nbs_h1), lab.(nbs_h1))
|> Graph.add_edge(val.(nbs_h1), val.(nbs))
|> Graph.add_edge(val.(nbs), val.(aberdeen))


# Site: ETAC

etac = %{ id: :etac, type: "TIP", site: "ETAC" }

g = g
|> Graph.add_vertex(val.(etac), lab.(etac))
|> Graph.add_edge(val.(etac), val.(nbs))
|> Graph.add_edge(val.(rml), val.(etac))


## Segment 2 - Main Diagonal - Up from RAND to LINCOLN

# Site: RAND

rand = %{ id: :rand, type: "IMP", site: "RAND" }

rand_h1 = %{ id: :rand_h1, type: "Host", computer: "IBM 1800" }
# rand_h2 = %{ id: :rand_h2, type: "Host", computer: "360/65" }

g = g
|> Graph.add_vertex(val.(rand), lab.(rand))
|> Graph.add_vertex(val.(rand_h1), lab.(rand_h1))
# |> Graph.add_vertex(val.(rand_h2), lab.(rand_h2))
|> Graph.add_edge(val.(rand_h1), val.(rand))
# |> Graph.add_edge(val.(rand_h2), val.(rand))
|> Graph.add_edge(val.(usc_isi), val.(rand))


# Site: UCSD

ucsd = %{ id: :ucsd, type: "IMP", site: "UCSD" }

ucsd_h1 = %{ id: :ucsd_h1, type: "Host", computer: "MICRO 810" }
# ucsd_h2 = %{ id: :ucsd_h2, type: "Host", computer: "B6700" }

g = g
|> Graph.add_vertex(val.(ucsd), lab.(ucsd))
|> Graph.add_vertex(val.(ucsd_h1), lab.(ucsd_h1))
# |> Graph.add_vertex(val.(ucsd_h2), lab.(ucsd_h2))
|> Graph.add_edge(val.(ucsd_h1), val.(ucsd))
# |> Graph.add_edge(val.(ucsd_h2), val.(ucsd))
|> Graph.add_edge(val.(rand), val.(ucsd))


# Site: UCLA

ucla = %{ id: :ucla, type: "IMP", site: "UCLA" }

ucla_h1 = %{ id: :ucla_h1, type: "Host", computer: "360/91" }
ucla_h2 = %{ id: :ucla_h2, type: "Host", computer: "SIGMA7" }

g = g
|> Graph.add_vertex(val.(ucla), lab.(ucla))
|> Graph.add_vertex(val.(ucla_h1), lab.(ucla_h1))
|> Graph.add_vertex(val.(ucla_h2), lab.(ucla_h2))
|> Graph.add_edge(val.(ucla_h1), val.(ucla))
|> Graph.add_edge(val.(ucla_h2), val.(ucla))
|> Graph.add_edge(val.(ucsd), val.(ucla))


# Site: SDC

sdc = %{ id: :sdc, type: "IMP", site: "SDC" }

sdc_h1 = %{ id: :sdc_h1, type: "Host", computer: "DDP-516" }
# sdc_h2 = %{ id: :sdc_h2, type: "Host", computer: "370/145" }

g = g
|> Graph.add_vertex(val.(sdc), lab.(sdc))
|> Graph.add_vertex(val.(sdc_h1), lab.(sdc_h1))
# |> Graph.add_vertex(val.(sdc_h2), lab.(sdc_h2))
|> Graph.add_edge(val.(sdc_h1), val.(sdc))
# |> Graph.add_edge(val.(sdc_h2), val.(sdc))
|> Graph.add_edge(val.(ucla), val.(sdc))


# Site: USC

usc = %{ id: :usc, type: "TIP", site: "USC" }

usc_h1 = %{ id: :usc_h1, type: "Host", computer: "360/44" }

g = g
|> Graph.add_vertex(val.(usc), lab.(usc))
|> Graph.add_vertex(val.(usc_h1), lab.(usc_h1))
|> Graph.add_edge(val.(usc_h1), val.(usc))
|> Graph.add_edge(val.(sdc), val.(usc))


# Site: DOCB

docb = %{ id: :docb, type: "TIP", site: "DOCB" }

g = g
|> Graph.add_vertex(val.(docb), lab.(docb))
|> Graph.add_edge(val.(usc), val.(docb))


# Site: GWC

gwc = %{ id: :gwc, type: "TIP", site: "GWC" }

g = g
|> Graph.add_vertex(val.(gwc), lab.(gwc))
|> Graph.add_edge(val.(docb), val.(gwc))


# Site: CASE

case = %{ id: :case, type: "IMP", site: "CASE" }

case_h1 = %{ id: :case_h1, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(case), lab.(case))
|> Graph.add_vertex(val.(case_h1), lab.(case_h1))
|> Graph.add_edge(val.(case_h1), val.(case))
|> Graph.add_edge(val.(gwc), val.(case))


# Site: RADC

radc = %{ id: :radc, type: "TIP", site: "RADC" }

g = g
|> Graph.add_vertex(val.(radc), lab.(radc))
|> Graph.add_edge(val.(case), val.(radc))


# Site: LINCOLN

lincoln = %{ id: :lincoln, type: "IMP", site: "LINCOLN" }

lincoln_h1 = %{ id: :lincoln_h1, type: "Host", computer: "360/67" }
lincoln_h2 = %{ id: :lincoln_h2, type: "Host", computer: "TX2" }
lincoln_h3 = %{ id: :lincoln_h3, type: "Host", computer: "TSP" }

g = g
|> Graph.add_vertex(val.(lincoln), lab.(lincoln))
|> Graph.add_vertex(val.(lincoln_h1), lab.(lincoln_h1))
|> Graph.add_vertex(val.(lincoln_h2), lab.(lincoln_h2))
|> Graph.add_vertex(val.(lincoln_h3), lab.(lincoln_h3))
|> Graph.add_edge(val.(lincoln_h1), val.(lincoln))
|> Graph.add_edge(val.(lincoln_h2), val.(lincoln))
|> Graph.add_edge(val.(lincoln_h3), val.(lincoln))
|> Graph.add_edge(val.(radc), val.(lincoln))
|> Graph.add_edge(val.(lincoln), val.(mit))


## Segment 3 - Second Diagonal, LHS - Up from UCSB to XEROX

# Site: UCSB

ucsb = %{ id: :ucsb, type: "IMP", site: "UCSB" }

ucsb_h1 = %{ id: :ucsb_h1, type: "Host", computer: "360/75" }
ucsb_h2 = %{ id: :ucsb_h2, type: "Host", computer: "PDP-11" }

g = g
|> Graph.add_vertex(val.(ucsb), lab.(ucsb))
|> Graph.add_vertex(val.(ucsb_h1), lab.(ucsb_h1))
|> Graph.add_vertex(val.(ucsb_h2), lab.(ucsb_h2))
|> Graph.add_edge(val.(ucsb_h1), val.(ucsb))
|> Graph.add_edge(val.(ucsb_h2), val.(ucsb))
|> Graph.add_edge(val.(ucla), val.(ucsb))


# Site: FNWC

fnwc = %{ id: :fnwc, type: "TIP", site: "FNWC" }

g = g
|> Graph.add_vertex(val.(fnwc), lab.(fnwc))
|> Graph.add_edge(val.(ucsb), val.(fnwc))


# Site: XEROX

xerox = %{ id: :xerox, type: "IMP", site: "XEROX" }

xerox_h1 = %{ id: :xerox_h1, type: "Host", computer: "NOVA" }
# xerox_h2 = %{ id: :xerox_h2, type: "Host", computer: "MAXC" }

g = g
|> Graph.add_vertex(val.(xerox), lab.(xerox))
|> Graph.add_vertex(val.(xerox_h1), lab.(xerox_h1))
# |> Graph.add_vertex(val.(xerox_h2), lab.(xerox_h2))
|> Graph.add_edge(val.(xerox_h1), val.(xerox))
# |> Graph.add_edge(val.(xerox_h2), val.(xerox))
|> Graph.add_edge(val.(fnwc), val.(xerox))
|> Graph.add_edge(val.(xerox), val.(sri))


## Segment 4 - Second Diagonal, RHS - Up from ARPA to CARNEGIE

# Site: ARPA

arpa = %{ id: :arpa, type: "TIP", site: "ARPA" }

arpa_h1 = %{ id: :arpa_h1, type: "Host", computer: "PDP-15" }

g = g
|> Graph.add_vertex(val.(arpa), lab.(arpa))
|> Graph.add_vertex(val.(arpa_h1), lab.(arpa_h1))
|> Graph.add_edge(val.(arpa_h1), val.(arpa))
|> Graph.add_edge(val.(etac), val.(arpa))


# Site: MITRE

mitre = %{ id: :mitre, type: "TIP", site: "MITRE" }

g = g
|> Graph.add_vertex(val.(mitre), lab.(mitre))
|> Graph.add_edge(val.(arpa), val.(mitre))


# Site: SDAC

sdac = %{ id: :sdac, type: "TIP", site: "SDAC" }

g = g
|> Graph.add_vertex(val.(sdac), lab.(sdac))
|> Graph.add_edge(val.(mitre), val.(sdac))


# Site: BELVOIR

belvoir = %{ id: :belvoir, type: "IMP", site: "BELVOIR" }

g = g
|> Graph.add_vertex(val.(belvoir), lab.(belvoir))
|> Graph.add_edge(val.(sdac), val.(belvoir))
|> Graph.add_edge(val.(belvoir), val.(aberdeen))


# Site: CARNEGIE

carnegie = %{ id: :carnegie, type: "IMP", site: "CARNEGIE" }

carnegie_h1 = %{ id: :carnegie_h1, type: "Host", computer: "PDP-10" }
carnegie_h2 = %{ id: :carnegie_h2, type: "Host", computer: "PDP-10" }

g = g
|> Graph.add_vertex(val.(carnegie), lab.(carnegie))
|> Graph.add_vertex(val.(carnegie_h1), lab.(carnegie_h1))
|> Graph.add_vertex(val.(carnegie_h2), lab.(carnegie_h2))
|> Graph.add_edge(val.(carnegie_h1), val.(carnegie))
|> Graph.add_edge(val.(carnegie_h2), val.(carnegie))
|> Graph.add_edge(val.(belvoir), val.(carnegie))
|> Graph.add_edge(val.(carnegie), val.(case))


## Segment 5 - Satellite Link (Hawaii)

# Site: HAWAII

hawaii = %{ id: :hawaii, type: "TIP", site: "HAWAII" }

g = g
|> Graph.add_vertex(val.(hawaii), lab.(hawaii))
|> Graph.add_edge(val.(hawaii), val.(ames))

# add reversed edges
#Â g = g |> Graph.edges |> Enum.reduce(g, fn %{v1: v1, v2: v2, label: label} = _e, g -> Graph.add_edge(g, v2, v1, label: label) end)
